{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chatterino Wiki","text":"<p>This wiki provides information for Chatterino.</p>"},{"location":"Commands/","title":"Commands","text":"<p>Commands are used as shortcuts for long messages. If a message starts with the \"trigger\" then the message will be replaced with the Command.</p>"},{"location":"Commands/#built-in-commands","title":"Built-in commands","text":"<p>Chatterino comes with a collection of built-in commands to help with channel management, Twitch interaction, and other misc. features.</p>"},{"location":"Commands/#banid","title":"<code>/banid</code>","text":"<p>Usage: <code>/banid &lt;userID&gt;</code><sup>1</sup></p> <p>Bans a user by their userID instead of their username. Useful for banning users who are temporarily suspended from Twitch, which <code>/ban</code> cannot do anymore.</p> <p><code>Note:</code> If you ban a suspended user this way, they cannot be unbanned from Chatterino, you must wait until their suspension ends or unban them from browser chat.</p>"},{"location":"Commands/#block-unblock","title":"<code>/block</code> &amp; <code>/unblock</code>","text":"<p>Usage: <code>/(block|unblock) &lt;user&gt;</code></p> <p>Blocks or unblocks the specified user. Blocking will hide that user's messages/whispers as well as disassociate them from you on Twitch. For more information about blocking, see Twitch's help article.</p>"},{"location":"Commands/#chatters","title":"<code>/chatters</code>","text":"<p>Usage: <code>/chatters</code></p> <p>Shows the total amount of chatters currently connected to the channel.</p>"},{"location":"Commands/#clearmessages","title":"<code>/clearmessages</code>","text":"<p>Usage: <code>/clearmessages</code></p> <p>Clears all messages from the current split/channel. This command is purely visual and is not related to the <code>/clear</code> moderator command.</p>"},{"location":"Commands/#clip","title":"<code>/clip</code>","text":"<p>Usage: <code>/clip</code></p> <p>Creates a clip from the last 30 seconds of the current channel. Also provides an edit link to edit a clip from the current point in time.</p>"},{"location":"Commands/#debug-args","title":"<code>/debug-args</code>","text":"<p>Usage: <code>/debug-args</code></p> <p>Displays the arguments that chatterino was launched with.</p>"},{"location":"Commands/#delete","title":"<code>/delete</code>","text":"<p>Usage: <code>/delete &lt;msg-id&gt;</code></p> <p>Moderator only, deletes a message in chat with the provided ID. Usually used in mod actions as they can pass through the message ID.</p>"},{"location":"Commands/#fakemsg","title":"<code>/fakemsg</code>","text":"<p>Usage: <code>/fakemsg &lt;raw message&gt;</code></p> <p>Displays the provided IRC messsage in chat as if it was sent from Twitch's IRC server.</p>"},{"location":"Commands/#marker","title":"<code>/marker</code>","text":"<p>Usage: <code>/marker</code></p> <p>Editor only, creates a stream marker in the current stream. Streamer must be live to create markers.</p>"},{"location":"Commands/#openurl","title":"<code>/openurl</code>","text":"<p>Usage: <code>/openurl &lt;url&gt;</code></p> <p>Opens a URL in the default web browser. Useful in custom commands.</p>"},{"location":"Commands/#popout","title":"<code>/popout</code>","text":"<p>Usage: <code>/popout [channel]</code></p> <p>Opens the current channel or provided channel's chat in Twitch's popout webchat, using your default browser.</p>"},{"location":"Commands/#popup","title":"<code>/popup</code>","text":"<p>Usage: <code>/popup [channel]</code></p> <p>Opens the current channel or provided channel's chat in a new window.</p>"},{"location":"Commands/#r","title":"<code>/r</code>","text":"<p>Usage: <code>/r &lt;message&gt;</code></p> <p>Replies to the last received whisper.</p>"},{"location":"Commands/#setgame","title":"<code>/setgame</code>","text":"<p>Usage: <code>/setgame &lt;game&gt;</code></p> <p>Broadcaster only, sets the current channel's game to the best match of the provided game name.</p>"},{"location":"Commands/#settitle","title":"<code>/settitle</code>","text":"<p>Usage: <code>/settitle &lt;title&gt;</code></p> <p>Broadcaster only, sets the current channel's title to the provided text.</p>"},{"location":"Commands/#streamlink","title":"<code>/streamlink</code>","text":"<p>Usage: <code>/streamlink [channel]</code></p> <p>Attempts to open current or specified stream in streamlink. For more information, see Streamlink's website.</p>"},{"location":"Commands/#uptime","title":"<code>/uptime</code>","text":"<p>Usage: <code>/uptime</code></p> <p>Displays the uptime of the current channel's livestream.</p>"},{"location":"Commands/#user","title":"<code>/user</code>","text":"<p>Usage: <code>/user &lt;user&gt; [channel]</code></p> <p>Opens the specified user's Twitch usercard for the given channel (or the channel provided) in the default browser.</p>"},{"location":"Commands/#usercard","title":"<code>/usercard</code>","text":"<p>Usage: <code>/usercard &lt;user&gt; [channel]</code></p> <p>Opens the specified user's Chatterino usercard for the given channel or the channel provided.</p>"},{"location":"Commands/#w-whisper","title":"<code>/w</code> (Whisper)","text":"<p>Usage: <code>/w &lt;user&gt; &lt;message&gt;</code></p> <p>Whispers the provided text to a user on Twitch. See Chatterino's whisper FAQ item for whisper-related issues.</p>"},{"location":"Commands/#custom-commands","title":"Custom commands","text":""},{"location":"Commands/#example","title":"Example","text":"<p>Add Command <code>Hello chat :)</code> with the trigger <code>/hello</code>. Now typing <code>/hello</code> in chat will send <code>Hello chat :)</code> instead of <code>/hello</code>.</p>"},{"location":"Commands/#advanced","title":"Advanced","text":"<ul> <li>The trigger has to be matched at the start of the message but there is a setting to also match them at the end.</li> <li>Triggers don't need to start with <code>/</code></li> </ul>"},{"location":"Commands/#using-placeholders","title":"Using placeholders","text":"<ul> <li> <p><code>{1}</code>, <code>{2}</code>, <code>{3}</code> and so on can be used to insert the 1st, 2nd, 3rd, ... word after the trigger.     Example: Add Command <code>/timeout {1} 1</code> with trigger <code>/warn</code>. Now typing <code>/warn user123</code> will send <code>/timeout user123 1</code></p> </li> <li> <p>Similarly <code>{1+}</code> and so on can be used to insert all words starting with the 1st, ... word.     Example: Add Command <code>Have a {1+} day!</code> with trigger <code>/day</code>. Now typing <code>/day very super nice</code> will send <code>Have a very super nice day!</code></p> </li> <li> <p>You can use <code>{{1}</code> if you want to send <code>{1}</code> literally.</p> </li> <li> <p><code>{channel.name}</code> can be used to insert the name of the current channel.     Example: Add Command <code>/openurl https://twitch.tv/{channel.name}</code> with trigger <code>/openchannel</code>. Now typing <code>/openchannel</code> will open the current channel in your browser.</p> </li> <li> <p><code>{channel.id}</code> can be used to insert the Twitch account ID of the owner of current channel.</p> </li> <li> <p><code>{my.name}</code> can be used to insert the Twitch username of the currently selected account.</p> </li> <li> <p><code>{my.id}</code> can be used to insert the Twitch account ID of the currently selected account.</p> </li> <li> <p><code>{stream.title}</code> can be used to insert the title set in the current channel. Only works if the channel is live.     Example: Add Command <code>The title is {stream.title}</code> with trigger <code>/title</code>. Now typing <code>/title</code> will send a message like <code>The title is Programming.S04E74.1440p.MP4-XD.NVENC</code></p> </li> <li> <p><code>{stream.game}</code> can be used to insert the game set in the current channel. Only works if the channel is live.     Example: Add Command <code>I'm currently playing {stream.game}</code> with trigger <code>/game</code>. Now typing <code>/game</code> will send a message like <code>I'm currently playing World of Warcraft</code>.</p> </li> </ul> <ol> <li> <p>Added in 2.4.2\u00a0\u21a9</p> </li> </ol>"},{"location":"Contributing%20for%20Developers/","title":"Contribution Guidelines","text":"<p>This is a set of guidelines for contributing to Chatterino. The goal is to teach programmers without C++ background (java/python/etc.), people who haven't used Qt or otherwise have different experience the idioms of the codebase. Thus, we will focus on those which are different from those other environments. There are extra guidelines available here, but they are considered as extras and not as important.</p>"},{"location":"Contributing%20for%20Developers/#tooling","title":"Tooling","text":""},{"location":"Contributing%20for%20Developers/#formatting","title":"Formatting","text":"<p>Code is automatically formatted using <code>clang-format</code>. It takes the burden off of the programmer and ensures that all contributors use the same style (even if mess something up accidentally). We recommend that you set up automatic formatting on file save in your editor.</p>"},{"location":"Contributing%20for%20Developers/#code","title":"Code","text":""},{"location":"Contributing%20for%20Developers/#comments","title":"Comments","text":"<p>Comments should only be used to:</p> <ul> <li>Increase readability (e.g. grouping member variables).</li> <li>Containing information that can't be expressed in code.</li> </ul> <p>Try to structure your code so that comments are not required.</p>"},{"location":"Contributing%20for%20Developers/#good-example","title":"Good example","text":"<pre><code>/**\n * @return 0 if a == b, negative if a &lt; b and positive if b &gt; a. (1)\n */\nint /* (2)! */ compare(const QString &amp;a, const QString &amp;b);\n</code></pre> <ol> <li>You can't know this from the function signature, so it's good to clarify this.</li> <li>Even better: Return a \"strong ordering\" type (but we don't have such a type right now).</li> </ol>"},{"location":"Contributing%20for%20Developers/#bad-example","title":"Bad example","text":"<pre><code>/*\n * Matches a link and returns boost::none if it failed and a\n * QRegularExpressionMatch on success. (1)\n *\n * @param text The text that will be checked if it contains a link. (2)\n */\nboost::optional&lt;QRegularExpressionMatch&gt; matchLink(const QString &amp;text);\n</code></pre> <ol> <li>This repeats the function signature.</li> <li>This is obvious from the function and parameter names.</li> </ol>"},{"location":"Contributing%20for%20Developers/#code_1","title":"Code","text":""},{"location":"Contributing%20for%20Developers/#arithmetic-types","title":"Arithmetic Types","text":"<p>Arithmetic types (like <code>char</code>, <code>int</code>, <code>float</code> or <code>size_t</code>), <code>bool</code>, and pointers are NOT initialized by default in C++. They keep whatever value is already at their position in the memory. This makes debugging harder and is unpredictable, so we initialize them to zero by using <code>{}</code> after their name when declaring them.</p> <pre><code>class ArithmeticTypes\n{\n    // DO\n    int n{}; // (1)!\n    bool isEnabled{}; // (2)!\n    QWidget *myPtr{}; // (3)!\n    int thisIs5 = 5; // (4)!\n    std::vector&lt;int&gt; myVec; // (5)!\n\n    // DON'T\n    int m; // (6)!\n    bool isHidden; // (7)!\n    QWidget *yourPtr; // (8)!\n    std::vector&lt;int&gt; myVec{}; // (9)!\n};\n</code></pre> <ol> <li>Initialized to <code>0</code>.</li> <li>Initialized to <code>false</code>.</li> <li>Initialized to <code>nullptr</code>.</li> <li>Explicitly initialized to <code>5</code>.</li> <li>Other non-arithmetic types call constructors instead, so no need for <code>{}</code>.</li> <li>\u26a0 Random value.</li> <li>\u26a0 Random value.</li> <li>\u26a0 Random value. Dereferencing this will likely segfault.</li> <li>Unnecessary <code>{}</code> as the default constructor will be called even without <code>{}</code>.</li> </ol>"},{"location":"Contributing%20for%20Developers/#passing-parameters","title":"Passing parameters","text":"<p>The way a parameter is passed signals how it is going to be used inside the function. C++ doesn't have multiple return values, so there is \"out parameters\" (reference to a variable that is going to be assigned inside the function) to simulate multiple return values.</p> <p>Cheap to copy types like int/enum/etc. can be passed in per value since copying them is fast.</p> <pre><code>void setValue(int value /* (1)! */) {\n    this-&gt;value_ = value;\n}\n\nvoid sendGreeting(const /* (2)! */ User &amp;user /* (3)! */, MessageFlags flags /* (4)! */) {\n    this-&gt;sendMessage(user.id(), user.name(), flags);\n}\n</code></pre> <ol> <li><code>int</code>s are cheap to copy. Here, the parameter will likely be passed in a register.</li> <li>We only need to read the user's name, so it's marked as <code>const</code>.</li> <li><code>User</code> is a class that contains the user's name and other fields, thus it's expensive to copy - so a reference is used.</li> <li><code>MessageFlags</code> is an enum, so it's cheap to copy.</li> </ol> <p>References mean that the variable doesn't need to be copied when it is passed to a function.</p> Type Meaning <code>const Type&amp; name</code> in Parameter. It is NOT going to be modified and may be copied inside the function. <code>Type&amp; name</code> out or in+out Parameter. It will be modified. <p>Pointers signal that objects are managed manually. While the above are only guaranteed to live as long as the function call (= don't store and use later) these may have more complex lifetimes.</p> Type Meaning <code>Type* name</code> The lifetime of the parameter may exceed the length of the function call. It may use the <code>QObject</code> parent/children system (see QObject Classes). <p>R-value references <code>&amp;&amp;</code> work similar to regular references but signal the parameter should be \"consumed\".</p> <pre><code>void storeLargeObject(LargeObject &amp;&amp;object) {\n    // ...\n}\n\nvoid storeObject(std::unique_ptr&lt;Object&gt; &amp;&amp;object) {\n    // ...\n}\n\nvoid main() {\n    LargeObject large = { /*...*/ };\n\n    storeLargeObject(std::move(large)); // (1)!\n\n    std::unique_ptr&lt;Object&gt; unique = std::make_unique(/*...*/);\n    storeObject(std::move(unique)); // (2)!\n\n    assert(unique.get() == nullptr); // (3)!\n}\n</code></pre> <ol> <li><code>storeLargeObject</code> accepts an r-value reference, and we use <code>std::move()</code>, thus we move the object and avoid the need to copy.</li> <li>You can't copy a <code>std::unique_ptr</code>, so we need to move here.</li> <li>The pointer contained by unique has now been consumed by <code>storeObject</code>, so it just holds a null pointer now.</li> </ol> <p>Generally the lowest level of requirement should be used e.g. passing <code>Channel&amp;</code> instead of <code>std::shared_ptr&lt;Channel&gt;&amp;</code> (aka <code>ChannelPtr</code>) if possible.</p>"},{"location":"Contributing%20for%20Developers/#members","title":"Members","text":"<p>All functions names are in <code>camelCase</code>. Private member variables are in <code>camelCase_</code> (note the underscore at the end). We don't use the <code>get</code> prefix for getters. We mark functions as <code>const</code> if applicable.</p> <pre><code>class NamedObject\n{\npublic:\n    const QString &amp;name() const; // (1)!\n    void setName(const QString &amp;name);\n    bool hasLongName() const; // (2)!\n\n    static void myStaticFunction(); // (3)!\n    QString publicName;\n\nprivate:\n    QString name_; // (4)!\n    // QString name; (5)\n\n    void myPrivateMethod(); // (6)!\n};\n\nvoid myFreeStandingFunction(); // (7)!\n</code></pre> <ol> <li>No <code>get</code> prefix.</li> <li>A <code>has</code> or <code>is</code> prefix is okay.</li> <li>Static member functions start lowercase as well.</li> <li>Private members have a <code>_</code> suffix.</li> <li>This declaration would collide with the <code>name()</code> accessor.</li> <li>Private methods don't have a <code>_</code> suffix.</li> <li>Free standing functions start lowercase as well.</li> </ol>"},{"location":"Contributing%20for%20Developers/#casts","title":"Casts","text":"<ul> <li>Avoid c-style casts: <code>(type)variable</code>.</li> <li>Instead use explicit type casts: <code>type(variable)</code></li> <li>Or use one of static_cast, const_cast and dynamic_cast</li> <li>Try to avoid reinterpret_cast unless necessary.</li> </ul> <pre><code>void example(float f, Base *b, const User &amp;user, int p) {\n    // DO\n    int i = int(f); // (1)!\n    Derived* derived = dynamic_cast&lt;Derived*&gt;(base); // (2)!\n    if (derived != nullptr) // (3)!\n    {\n        // use derived\n    }\n\n    // BE CAREFUL\n    const_cast&lt;User &amp;&gt;(c).setName(\"foo\"); // (4)!\n    float *pp = reinterpret_cast&lt;float*&gt;(&amp;p); // (5)!\n\n    // DON'T (6)\n    int i = (int)f;\n    Derived* derived = (Derived*)base;\n    ((int &amp;)c) = 123;\n    float *pp = (float*)&amp;p;\n}\n</code></pre> <ol> <li>Use explicit type casts.</li> <li>Use explicit dynamic_cast.</li> <li>Unless extremely obvious, always check the result of dynamic_cast.</li> <li>Only use const_cast if using proper const correctness doesn't work.</li> <li>reinterpret_cast is required very rarely.</li> <li>Avoid C-style casts.</li> </ol>"},{"location":"Contributing%20for%20Developers/#this","title":"This","text":"<p>Always use <code>this</code> to refer to instance members to make it clear where we use either locals or members.</p> <pre><code>class Test\n{\n    void testFunc(int a);\n    int testInt_{};\n}\n\nTest::testFunc(int a)\n{\n    // DO\n    this-&gt;testInt_ += 2;\n    this-&gt;testFunc();\n\n    // DON'T\n    testInt_ -= 123;\n    testFunc(2);\n    this-&gt;testFunc(testInt_/*(1)!*/ + 1);\n}\n</code></pre> <ol> <li>It's unclear if it's a local or member variable, especially if the method is more complex.</li> </ol>"},{"location":"Contributing%20for%20Developers/#managing-resources","title":"Managing resources","text":""},{"location":"Contributing%20for%20Developers/#regular-classes","title":"Regular classes","text":"<p>Keep the element on the stack if possible. If you need a pointer or have complex ownership you should use one of these classes:</p> <ul> <li>Use <code>std::unique_ptr</code> if the resource has a single owner.</li> <li>Use <code>std::shared_ptr</code> if the resource has multiple owners.</li> </ul>"},{"location":"Contributing%20for%20Developers/#qobject-classes","title":"QObject classes","text":"<ul> <li>Use the object tree to manage lifetime where possible. Objects are destroyed when their parent object is destroyed.</li> <li>If you have to explicitly delete an object use <code>variable-&gt;deleteLater()</code> instead of <code>delete variable</code>. This ensures that it will be deleted on the correct thread.</li> <li>If an object doesn't have a parent consider using <code>std::unique_ptr&lt;Type, DeleteLater&gt;</code> with <code>DeleteLater</code> from \"common/Common.hpp\". This will call <code>deleteLater()</code> on the pointer once it goes out of scope or the object is destroyed.</li> </ul>"},{"location":"Crash%20Analysis/","title":"Crash Analysis","text":"<p>When running on Windows, Chatterino 2.4.1 and later will automatically save information about a crash in a minidump.</p> <p>Crashdumps are saved inside the <code>Crashes/reports</code> folder in your Chatterino folder.</p> <p>There are several ways of analyzing crashes. To get started, you need to have a symbol (PDB) file for your installation. These files are unique per build meaning that you need to download the file (this is especially important when using nightly builds). For GitHub builds, you can find the PDB file in the release - it's zipped in an archive ending in <code>.pdb.7z</code>. For simplicity, extract the <code>.pdb</code> to the location of your <code>chatterino.exe</code>.</p>"},{"location":"Crash%20Analysis/#windbg","title":"WinDbg","text":"<p>For analyzing with a GUI, install WinDbg Preview from the Microsoft Store. After the installation, you should be able to open the crashdumps (<code>.dmp</code> files) right from the Windows Explorer. By default, you won't get much information.</p> <p>To add names to functions (symbols), open the settings (Home &gt; Settings), go to Debugging Settings, and add the directory you extracted your symbol file to the Symbol path. If there's no <code>srv*</code> entry, consider adding one - this will try to load symbols from servers for system libraries.</p> <p>To add source-files, clone the repository and checkout the source-tree at the version of your executable. Then add this path to Source Path in the Debugging Settings.</p> <p>Note: You might need to reload your window to have your changes be picked up.</p> Example Settings"},{"location":"Crash%20Analysis/#minidump-stackwalk","title":"minidump-stackwalk","text":"<p>If you want to use the terminal or don't have a Windows machine, you can use <code>minidump-stackwalk</code>. Install <code>minidump-stackwalk</code> and <code>dump_syms</code> with cargo (installation): <code>cargo install &lt;app&gt;</code>.</p> <p>First, you need to generate a symbol-store from the PDB file with <code>dump_syms</code>:</p> <pre><code>dump_syms chatterino.exe -s &lt;store-path&gt; # (1)!\n</code></pre> <ol> <li>This can be any folder you want. Symbols will be extracted here.</li> </ol> <p>After you dumped the symbols, run:</p> <pre><code>minidump-stackwalk &lt;path-to-crashdump&gt; --symbols-path &lt;store-path&gt;\n</code></pre> <p>Since Chatterino has quite a few threads, the output will be long. Most of the time, you're interested in the first thread (GUI thread) since it's the crashing thread.</p>"},{"location":"Environment%20Variables/","title":"Environment Variables","text":"<p>Below I have tried to list all environment variables that can be used to modify the behaviour of Chatterino. Used for things that I don't feel like fit in the settings system.</p>"},{"location":"Environment%20Variables/#chatterino2_recent_messages_url","title":"CHATTERINO2_RECENT_MESSAGES_URL","text":"<p>Used to change the URL that Chatterino2 uses when trying to load historic Twitch chat messages (if the setting is enabled). Default value: <code>https://recent-messages.robotty.de/api/v2/recent-messages/%1</code> (an open-source service written and currently run by @RAnders00 - visit the homepage for more details about the service) Arguments:</p> <ul> <li><code>%1</code> = Name of the Twitch channel</li> </ul>"},{"location":"Environment%20Variables/#chatterino2_link_resolver_url","title":"CHATTERINO2_LINK_RESOLVER_URL","text":"<p>Used to change the URL that Chatterino2 uses when trying to get link information to display in the tooltip on hover. Default value: <code>https://braize.pajlada.com/chatterino/link_resolver/%1</code> Arguments:</p> <ul> <li><code>%1</code> = Escaped URL the link resolver should resolve</li> </ul>"},{"location":"Environment%20Variables/#chatterino2_twitch_emote_set_resolver_url","title":"CHATTERINO2_TWITCH_EMOTE_SET_RESOLVER_URL","text":"<p>Used to change the URL that Chatterino2 uses when trying to get emote set information Default value: <code>https://braize.pajlada.com/chatterino/twitchemotes/set/%1/</code> Arguments:</p> <ul> <li><code>%1</code> = Emote set ID</li> </ul>"},{"location":"Environment%20Variables/#chatterino2_twitch_server_host","title":"CHATTERINO2_TWITCH_SERVER_HOST","text":"<p>String value used to change what Twitch chat server host to connect to. Default value: <code>irc.chat.twitch.tv</code></p>"},{"location":"Environment%20Variables/#chatterino2_twitch_server_port","title":"CHATTERINO2_TWITCH_SERVER_PORT","text":"<p>Number value used to change what port to use when connecting to Twitch chat servers. Currently known valid ports for secure usage: 6697, 443. Currently known valid ports for non-secure usage (CHATTERINO2_TWITCH_SERVER_SECURE set to false): 6667, 80. Default value: <code>443</code></p>"},{"location":"Environment%20Variables/#chatterino2_twitch_server_secure","title":"CHATTERINO2_TWITCH_SERVER_SECURE","text":"<p>Bool value used to tell Chatterino whether to try to connect securely (secure irc) to the Twitch chat server. Default value: <code>true</code></p>"},{"location":"Environment%20Variables/#chatterino2_proxy_url","title":"CHATTERINO2_PROXY_URL","text":"<p>Used to set a proxy for network interactions of Chatterino. Both HTTP and SOCKS5<sup>1</sup> proxies are supported. The URL supports username and password authentication. Example: <code>http://username:password@127.0.0.1:1080</code> or <code>socks5://127.0.0.1</code> (defaults to port <code>1080</code>).</p>"},{"location":"Environment%20Variables/#qt_logging_rules","title":"QT_LOGGING_RULES","text":"<p>Used to enable/disable logging at run time. For example: <code>QT_LOGGING_RULES=\"chatterino.*.debug=true\"</code> to enable debug logging in release builds. (It's on by default in debug builds). See Qt docs for more details.</p>"},{"location":"Environment%20Variables/#qt_message_pattern","title":"QT_MESSAGE_PATTERN","text":"<p>Used to customize logging at run time. For example: <code>QT_MESSAGE_PATTERN=\"%{time hh:mm:ss.zzz} %{category}: %{function} %{message}\"</code> enables a timestamp and function name in log messages. See Qt docs for more details.</p> <ol> <li> <p>When using a SOCKS5 proxy, WebSockets (Twitch PubSub, 7TV EventAPI, and BTTV EventSockets) are not proxied. Only IRC and HTTP requests are proxied.\u00a0\u21a9</p> </li> </ol>"},{"location":"Features/","title":"Features","text":""},{"location":"Features/#replies","title":"Replies","text":"<p>We support Twitch's Chat Replies feature.</p> <p>A reply can be executed by right-clicking a message, and selecting <code>Reply to message</code>, or by opening an existing Reply Thread and sending your message there. Users who replied to your message, or messages sent in a reply thread you participated in, are highlighted and can be customized in the highlight setting <code>Participated Reply Threads</code>.</p>"},{"location":"Filters/","title":"Filters","text":"<p>Filters are a powerful tool to create your own custom, filtered channel splits. Filters allow you to selectively show messages that satisfy your own custom criteria: show subscribers' messages, moderator messages, channel point redemptions, new subscriptions, and more.</p> <p>Looking for inspiration? Look at some example filters.</p>"},{"location":"Filters/#introduction-to-filters","title":"Introduction to Filters","text":"<p>Filters can be applied to splits to provide a selective view of messages. Filters are created in the Settings page and are applied by opening the Split menu (three dots) and selecting \"Set filters\". Applied filters are saved when you close and open Chatterino.</p> <p>Multiple filters can be applied to a Split. A message must pass all applied filters for it to be displayed.</p> <p>Simple filters are available through the Channel Filter Creator dialog. Advanced filters take inspiration from many programming languages, and the full description of keywords and operators can be found below.</p>"},{"location":"Filters/#writing-your-own-filters","title":"Writing your own filters","text":"<p>To begin writing your own filters, take a look at the available operators and variables below.</p> <p>For most tasks involving the message content, you can make use of the <code>contains</code> operator, or the <code>matches</code> operator with a regular expression. Then, try to break your desired behavior into multiple conditions. Combine them like this:</p> <ul> <li>If you need all the conditions satisfied, combine them with AND (<code>condition1 &amp;&amp; condition2</code>)</li> <li>If you only need one of the conditions, combine them with OR (<code>condition1 || condition2</code>)</li> <li>If you need the opposite of one of the conditions, wrap it with parentheses and add a NOT: <code>!(condition)</code></li> </ul>"},{"location":"Filters/#example","title":"Example","text":"<p>Consider the following intention: \"Only show me messages that are from moderators and mention me\". We can break this filter into two individual conditions:</p> <ol> <li>Messages that are from moderators</li> <li>Messages that mention me</li> </ol> <p>We can then write the corresponding filter parts:</p> <ol> <li><code>author.badges contains \"moderator\"</code></li> <li><code>message.content contains \"@my_name\"</code></li> </ol> <p>Finally, because we want both of these conditions to be true, we combine them with the AND operator <code>&amp;&amp;</code> and end up with this final filter:</p> <p><code>(author.badges contains \"moderator\") &amp;&amp; (message.content contains \"@my_name\")</code></p>"},{"location":"Filters/#quick-add","title":"Quick Add","text":"<p>If you already have a filter, you can use the <code>Quick Add</code> button and paste your filter into the <code>Filter</code> section. </p>"},{"location":"Filters/#terminology","title":"Terminology","text":"<p>Here is some terminology that you'll encounter in the rest of this document.</p> <ol> <li>Value: A value is the simplest element of a filter. It can take on multiple forms: a number, a string (i.e. text), a regular expression, or a list of multiple values.</li> <li>Type: A type describes the general form of a value. For example, every number has type Int. Every string has type String.</li> <li>Variable: A variable is a placeholder for some information about a message. For example, the variable <code>message.content</code> represents the text of a message</li> <li>Operator: An operator acts on one or two values and evaluates to another value. For example, the plus operator <code>+</code> can add two numbers, <code>1 + 1</code> or concatenate strings, <code>\"a\" + \"b\"</code></li> </ol>"},{"location":"Filters/#example-filters","title":"Example filters","text":"<ul> <li><code>message.content contains \"hello\"</code><ul> <li>Only messages that contain the phrase <code>hello</code></li> </ul> </li> <li><code>message.length &lt; 40 || author.subbed</code><ul> <li>Messages that are less than 40 characters long, OR are sent by a subscriber.</li> </ul> </li> <li><code>channel.name == \"somestreamer\" &amp;&amp; author.badges contains \"moderator\"</code><ul> <li>Messages that originated in the channel <code>somestreamer</code> AND are from users with a moderator badge</li> </ul> </li> </ul>"},{"location":"Filters/#filter-syntax-semantics","title":"Filter Syntax + Semantics","text":"<p>This section is aimed at technical users who have experience with general purpose programming languages.</p> <p>A filter must be a valid expression. An expression is comprised of conditions and values which are evaluated to a single <code>True</code> or <code>False</code> value to decide whether to filter a message. Evaluating to something other than <code>True</code> or <code>False</code> will lead to all messages being filtered out.</p>"},{"location":"Filters/#values","title":"Values","text":"<p>A value can be:</p> <ol> <li>An integer (<code>123</code>, <code>5</code>)</li> <li>A string (<code>\"hello\"</code>, <code>\"this is a string\"</code>)</li> <li>A variable (<code>author.name</code>, <code>message.length</code>)<ul> <li>Technically, a variable isn't a value, but is given value by substitution</li> <li>When a filter is evaluated, variables are replaced with the values they represent</li> </ul> </li> <li>A regular expression (<code>r\"\\d\\d\\d\\d\"</code>)</li> <li>A list of values (<code>{123, \"hello\", author.name}</code>)</li> </ol> <p>Regular expressions are similar to strings, but are denoted with an <code>r</code> before the opening quotation mark (e.g. <code>r\"something\"</code>). To make a regular expression case-insensitive, use <code>ri</code> before the opening quotation mark (e.g. <code>ri\"something\"</code>).</p> <p>Literals:</p> Name Example Int <code>123</code>, <code>5</code> String <code>\"Hello there\"</code>, <code>\"Escaped \\\" quote\"</code> RegEx <code>r\"\\d\\d\\d\\d\"</code>, <code>ri\"something.*\"</code> List `{\"list item\", 123}"},{"location":"Filters/#operators","title":"Operators","text":"<p>Binary operators act on two values:</p> <ul> <li><code>1 + 2</code></li> <li><code>author.subbed &amp;&amp; flags.highlighted</code></li> <li><code>\"long sentence\" contains \"ten\"</code></li> </ul> <p>Unary operators act on one value:</p> <ul> <li><code>!author.subbed</code></li> </ul> <p>The following operators are available:</p> Operator Description <code>&amp;&amp;</code> Logical AND <code> || </code> Logical OR <code>!</code> Negation <code>==</code> Equals <code>!=</code> Not equals <code>&lt;</code> Less than <code>&lt;=</code> Less than or equal to <code>&gt;</code> Greater than <code>&gt;=</code> Greater than or equal to <code>contains</code> String, List, or Map contains <code>startswith</code> String or List starts with text or value, respectively <code>endswith</code> String or List ends with text or value, respectively <code>match</code> Match string with regular expression <code>+</code> Add (or string concatenation) <code>-</code> Subtract <code>*</code> Multiply <code>/</code> Divide (integer) <code>%</code> Modulus <p>Please read about the type rules to better understand the evaluation semantics for operators that take multiple data types.</p>"},{"location":"Filters/#variables","title":"Variables","text":"<p>The following variables are available:</p> Variable Type Description Author User who sent the message <code>author.badges</code> List List of author's badges <code>author.color</code> Color* Color code of author, or none <code>author.name</code> String Display name of author <code>author.no_color</code> Bool Whether the author has no color set (i.e. gray name) <code>author.subbed</code> Bool Whether author is subscribed <code>author.sub_length</code> Int How long author has been subscribed (or zero) Channel The channel where the message was sent <code>channel.name</code> String Channel name <code>channel.watching</code> Bool Whether the channel is being watched (requires Chatterino extension) <code>channel.live</code> Bool Whether the channel is currently live Flags Message-specific flags <code>flags.highlighted</code> Bool Whether the message is highlighted <code>flags.points_redeemed</code> Bool Whether the message was redeemed through channel points <code>flags.sub_message</code> Bool Whether the message is a sub/resub/gift message <code>flags.system_message</code> Bool Whether the message is a system message (i.e. timeout/ban/info) <code>flags.reward_message</code> Bool Whether the message is a redeemed channel point reward message <code>flags.first_message</code> Bool Whether the message is the author's first message in the channel <code>flags.hype_chat</code> Bool Whether the message is a message the author paid to keep in browser chat for an increased duration<sup>1</sup> <code>flags.cheer_message</code> Bool Whether the message includes bits <code>flags.whisper</code> Bool Whether the message is a whisper <code>flags.reply</code> Bool Whether the message is a reply <code>flags.automod</code> Bool Whether the message has automod information or actions Message Actual message sent <code>message.content</code> String Message content <code>message.length</code> Int Message length <p>*Note: To compare a <code>Color</code>, compare it to a color hex code string: <code>author.color == \"#FF0000\"</code></p>"},{"location":"Filters/#data-types","title":"Data types","text":"<p>The Chatterino filter language is typed, meaning that every value has a type and only specific combinations of types are allowed when using operators. Generally, you won't run in to issues. The type system exists to warn you about any mistakes that your filter contains.</p>"},{"location":"Filters/#type-rules","title":"Type Rules","text":"Operator Form Result Description <code>+</code> <code>Int + Int</code> <code>Int</code> Adds two integers <code>+</code> <code>String + Any</code> <code>String</code> Concatenates the first string with the second argument <code>-</code> <code>Int - Int</code> <code>Int</code> Subtracts two integers <code>*</code> <code>Int * Int</code> <code>Int</code> Multiplies two integers <code>/</code> <code>Int / Int</code> <code>Int</code> Divides two integers, discarding the remainder <code>%</code> <code>Int % Int</code> <code>Int</code> Computes the modulus of two integers <code>&amp;&amp;</code> <code>Bool &amp;&amp; Bool</code> <code>Bool</code> Logical AND of two booleans <code>||</code> <code>Bool || Bool</code> <code>Bool</code> Logical OR of two booleans <code>==</code> <code>Any == Any</code> <code>Bool</code> Equality comparison of any two values <code>!=</code> <code>Any != Any</code> <code>Bool</code> Inequality comparison of any two values <code>&gt;</code> <code>Int &gt; Int</code> <code>Bool</code> Greater than comparison of two integers <code>&gt;=</code> <code>Int &gt;= Int</code> <code>Bool</code> Greater than or equal to comparison of two integers <code>&lt;</code> <code>Int &lt; Int</code> <code>Bool</code> Less than comparison of two integers <code>&lt;=</code> <code>Int &lt;= Int</code> <code>Bool</code> Less than or equal to comparison of two integers <code>startswith</code> <code>List startswith Any</code> <code>Bool</code> Checks whether the list has the given value as its first value <code>startswith</code> <code>String startswith String</code> <code>Bool</code> Checks whether the first string starts with the second string <code>endswith</code> <code>List endswith Any</code> <code>Bool</code> Checks whether the list has the given value as its last value <code>endswith</code> <code>String endswith String</code> <code>Bool</code> Checks whether the first string ends with the second string <code>contains</code> <code>List contains Any</code> <code>Bool</code> Checks whether the list contains the given value <code>contains</code> <code>Map contains Any</code> <code>Bool</code> Checks whether the map has the given value as a key <code>contains</code> <code>String contains String</code> <code>Bool</code> Checks whether the first string contains the second string <code>match</code> <code>String match RegEx</code> <code>Bool</code> Checks whether the string matches the given regular expression <code>match</code> <code>String match {RegEx, n : Int}</code> <code>String</code> Returns the <code>n</code>th matching capture group, or the empty string"},{"location":"Filters/#regular-expressions","title":"Regular Expressions","text":"<p>Chatterino can match string variables to a regular expression, returning whether the expression matched or, optionally, the value of a capture group.</p>"},{"location":"Filters/#simple-matching","title":"Simple matching","text":"<p><code>\"some string\" match r\"some regex\"</code> returns <code>True</code> or <code>False</code>.</p> <p>For example: <code>message.content match r\"\\d\\d\"</code></p>"},{"location":"Filters/#group-capturing","title":"Group capturing","text":"<p><code>\"some string\" match {r\"some regex\", capture number}</code> returns <code>False</code> if no match or the value of the nth captured group.</p> <p>For example: <code>message.content match {r\"(\\d\\d)/(\\d\\d)/(\\d\\d\\d\\d)\", 3}</code> matches the year component of a date like <code>12/31/2020</code>.</p> <p><code>(message.content match {r\"(\\d\\d)/(\\d\\d)/(\\d\\d\\d\\d)\", 3}) == \"2020\"</code> will filter only messages that contain a written date with 2020 as the year.</p>"},{"location":"Filters/#order-of-operations","title":"Order of Operations","text":"<p>The order of operations in filters may not be exactly what you expect.</p> <ul> <li>Expressions in parentheses are evaluated first</li> <li>Math operations are evaluated from left to right, not by MDAS. <code>2 + 3 * 4</code> yields <code>20</code>, not <code>14</code>.</li> <li><code>a &amp;&amp; b || c &amp;&amp; d</code> is evaluated as <code>(a &amp;&amp; b) || (c &amp;&amp; d)</code></li> <li><code>a || b &amp;&amp; c || d</code> is evaluated as <code>a || (b &amp;&amp; c) || d</code></li> </ul> <p>Basically, if you're unsure about the order of operations, use extra parentheses.</p> <ol> <li> <p>Replaced <code>flags.elevated_message</code> in 2.4.5\u00a0\u21a9</p> </li> </ol>"},{"location":"Glossary/","title":"Glossary","text":"<p>Explain common words used in Chatterino.</p>"},{"location":"Glossary/#anatomy-of-a-chatterino-window","title":"Anatomy of a Chatterino window","text":"Term Description Split Includes the chat, input field and a split header Split Header Contains split title, moderation actions, viewer list, split menu button and add split button Split Menu Settings or actions for the specific split Tab Can contain multiple splits"},{"location":"Glossary/#moderation","title":"Moderation","text":"Term Description Moderation buttons Allow you to quickly delete messages, timeout users or execute custom commands. They can be configured in Settings &gt; Moderation &gt; Moderation buttons Moderation mode button Toggles whether Moderation buttons are shown Usercard Contains useful information about a user, action buttons as well as their recent messages. Can be opened by clicking someone's username in chat or by typing <code>/usercard username</code> User Timeout Buttons Allow you time a user out from their Usercard. They can be configured in Settings &gt; Moderation &gt; User Timeout Buttons"},{"location":"Glossary/#replies","title":"Replies","text":"Term Description Reply Context Contains the message a user was replying to. Reply Thread Contains the history of replies to a message that Chatterino has loaded Reply Input The input box to send a reply. Available in both the normal Chatterino window, and the Reply Thread."},{"location":"Help/","title":"Help","text":"<p>Having issues with Chatterino or need general assistance? Check the below troubleshooting below corresponding to your operating system for assistance!</p> <p>Please search for your problem in the GitHub Issues. If there is no such issue, please create a new one. If you have more questions, feel free to join the Discord.</p>"},{"location":"Help/#basic-troubleshooting","title":"Basic troubleshooting","text":"<p>Prior to starting on the below, you should first try the basic troubleshooting steps listed here. These steps can resolve a variety of issues:</p> <ul> <li>Ensure that your Chatterino is up to date.</li> <li>[Windows] Try running Chatterino in administrator mode.</li> <li>[Windows] Ensure that you have the x64 Visual C++ Redistributables installed AND have restarted your PC after installation:<ul> <li>x64: https://aka.ms/vs/16/release/vc_redist.x64.exe</li> <li>Chocolatey: <code>choco install vcredist140</code></li> </ul> </li> <li>[MacOS] Open <code>System Preferences</code> go to <code>Security &amp; Privacy [General Tab]</code> and select <code>Open Anyway</code> or see this Apple support article.     </li> </ul>"},{"location":"Help/#i-am-having-an-issue-with-the-chatterino-extension","title":"I am having an issue with the Chatterino extension","text":"<p>Chatterino extension issues should be posted here.</p>"},{"location":"Help/#chatterino-not-startingcrashing-upon-startup","title":"Chatterino not starting/Crashing upon startup","text":"<ul> <li>[Windows] Try running Chatterino in administrator mode.</li> <li>[Windows] Adding Chatterino to your anti-virus/malware whitelist.</li> <li>[Windows] If nothing else works, try resetting your settings using the <code>Fresh Install</code> option in the installer.</li> </ul>"},{"location":"Help/#does-using-chatterino-accumulate-twitch-channel-points","title":"Does using Chatterino accumulate Twitch channel points?","text":"<p>Unfortunately not. This is a limitation due to Twitch using internal APIs for channel points. This will however work with most chatbots, as they simply take you being connected to chat as \"watching the stream\".</p>"},{"location":"Help/#can-i-use-chatterino-as-my-chat-overlay-for-my-stream","title":"Can I use Chatterino as my chat overlay for my stream?","text":"<p>You definitely can, but it's not recommended. We suggest using a service similar to KapChat.</p>"},{"location":"Help/#why-are-my-messages-being-sent-in-webchat-but-not-in-chatterino","title":"Why are my messages being sent in webchat, but not in Chatterino?","text":"<p>There's a few things to cover here:</p> <ul> <li>If your message is not sent in Chatterino, it is likely not sent in webchat either. Webchat renders messages whether they are sent or not, Chatterino will only render the message if it is accepted by the server.</li> <li>If you're trying to type in a chat where there are a lot of active chatters, then your message may be dropped by Twitch's chat servers (due to the volume).</li> <li>If an alt account has been banned in that chat, you have likely been shadowbanned by Twitch in that channel. Which prevents any of your other accounts from speaking in that channel.</li> <li>If you have spammed too much in another chat, you have likely been temporarily shadowbanned by Twitch in channels where you are not: Subscribed, VIP or Moderator.</li> </ul> <p>If all else fails, you may be having connection issues to Twitch or your network may be blocking the necessary IRC ports in order to connect.</p>"},{"location":"Help/#chatterino-is-repeatedly-disconnecting-from-twitch-chat","title":"Chatterino is repeatedly disconnecting from Twitch chat","text":"<p>If you are having troubles with Chatterino repeatedly connecting/disconnecting, it is likely due to the large amount of channels you are connected to. The maximum channel limit is usually around the 100 mark, but may differ from user to user. Try closing splits in Chatterino in order to fix this.</p>"},{"location":"Help/#i-am-unable-to-send-whispers-from-chatterino","title":"I am unable to send whispers from Chatterino","text":"<p>You may be unable to send a whisper via Chatterino for the following reasons:</p>"},{"location":"Help/#you-dont-have-a-verified-phone-number-attached-to-your-twitch-account","title":"You don't have a verified phone number attached to your Twitch account.","text":"<p>Twitch requires users to have a verified Phone Number attached to their account to send whispers from Chatterino. <code>NOTE:</code> A Verified Phone Number is NOT the same thing as Two-Factor Authentication. You can add a phone number to your account in Twitch Settings. </p>"},{"location":"Help/#you-are-on-a-chatterino-version-older-than-240","title":"You are on a Chatterino version older than 2.4.0:","text":"<p>On February 24th 2023 Twitch shutdown the service old versions of Chatterino used to send whispers. You must update to 2.4.0 or newer to continue sending whispers.</p>"},{"location":"Help/#ffzbttv-emotes-are-not-working","title":"FFZ/BTTV emotes are not working","text":"<p>You need to be logged in to see emotes. Try hitting F5 once to manually refresh the emotes.</p> <p>Chatterino only makes a connection to the necessary APIs to fetch these emotes, if you are still having issues fetching them, then your network may be blocking requests to those APIs.</p>"},{"location":"Help/#i-have-link-information-turned-on-but-am-unable-to-see-the-information-when-hovering-over-a-link","title":"I have link information turned on, but am unable to see the information when hovering over a link","text":"<ul> <li>The server (braize) used to fetch the link information may be down. Braize uptime can be found here.</li> <li>Your network may be having issues connecting to braize. Try restarting your PC and router.</li> </ul>"},{"location":"Help/#how-do-i-get-the-supporter-badge","title":"How do I get the supporter badge?","text":"<p>Donate \u20ac10 to fourtf here (can be done in multiple donations). You should get your badge automatically after about 5 minutes. Make sure to restart Chatterino if you can't see the badge. If you still can't see it, ask fourtf on Chatterino Discord for assistance.</p>"},{"location":"Help/#how-do-i-disable-the-supporter-badge","title":"How do I disable the supporter badge?","text":"<p>Log in to the badge manager and click on Disable My Chatterino Badge.</p>"},{"location":"Help/#login-expired-error","title":"Login expired error","text":"<p>If you're getting the <code>Login expired for user &lt;user&gt;! Try adding your account again.</code> error, simply re-add your account and it will start working again.</p>"},{"location":"Help/#how-do-i-add-chatterino-as-an-obs-dock","title":"How do I add Chatterino as an OBS dock?","text":"<p>This is not natively supported, but there is a workaround:</p> <ol> <li>Add a dock into OBS for standard Twitch chat.</li> <li>Turn on <code>Always on top</code> in Chatterino.</li> <li>Click the 3 dots up the top of a channel split and click <code>Popup</code>.</li> <li>Move and resize the chat to overlay on top of the standard Twitch chat.</li> </ol>"},{"location":"Help/#what-is-nightly-and-how-to-use-install-it","title":"What is nightly and how to use / install it","text":""},{"location":"Help/#overview","title":"Overview","text":"<p>Nightly is a \"developer release\" of Chatterino. It is released every time there's a new change added to source code. It includes some features that may not be available in the latest stable release.</p>"},{"location":"Help/#installation","title":"Installation","text":"<ol> <li>Go to nightly release page on GitHub.</li> <li>Download nightly:<ul> <li>For Windows download <code>chatterino-windows-x86-64.zip</code></li> <li>For Linux download <code>Chatterino-x86_64.AppImage</code></li> <li>For Mac download <code>chatterino-osx.dmg</code></li> </ul> </li> <li>Install nightly:<ul> <li>On Windows, right-click the archive &gt; <code>Extract All</code> &gt; <code>Extract</code> (Override files if prompted). Open the newly extracted folder and create a shortcut for the <code>chatterino.exe</code> file to the Desktop for easy access.</li> <li>On Linux, open up the download directory in your terminal and execute the following command <code>chmod +x Chatterino-x86_64.AppImage &amp;&amp; sudo mv Chatterino-x86_64.AppImage /usr/local/bin</code></li> <li>On Mac, open the dmg file and drag Chatterino into the Applications folder.</li> </ul> </li> </ol>"},{"location":"Help/#updating","title":"Updating","text":"<p>Nightly ignores version checking and it will not attempt to update on its own. Because of that it will not notify you when a new stable update is available. To update, repeat steps above. If you want to switch back to stable release, download and install it from Chatterino's website.</p>"},{"location":"Help/#issues","title":"Issues","text":"<p>Since nightly is a testing release, it may be a little unstable. If you find any bugs, make sure to report an issue on GitHub. Before opening an issue make sure you're on latest nightly (to check it, go to Settings &gt; About and compare commit hash) and that there's no duplicate issue already open.</p>"},{"location":"Help/#i-see-white-borders-on-full-screen","title":"I see white borders on full screen","text":"<p>This is a Windows issue, it can be mitigated by turning on Compatibility mode for Chatterino. Right click <code>chatterino.exe</code> -&gt; Properties -&gt; Compatibility -&gt; Enable \"Run this program in compatibility mode for:\" -&gt; Select Windows 8 in the drop-down menu. </p>"},{"location":"Help/#my-reply-was-sent-to-the-wrong-message","title":"My Reply was sent to the wrong message","text":"<p>Due to the way Twitch has implemented their Reply Feature, we are forced to reply to the <code>\"head\"</code> message, even if it was your intention to reply to another message in the thread. Using the <code>/reply</code> command will reply to a user's most recent message, and create a brand new reply thread, even if that message was apart of an existing reply thread.</p>"},{"location":"Hotkeys/","title":"Hotkeys","text":""},{"location":"Hotkeys/#introduction-to-hotkeys","title":"Introduction to Hotkeys","text":"<p>By default, Chatterino contains a set of default hotkeys. A hotkey can be described using five parameters:</p> <ul> <li>Its name</li> <li>A category</li> <li>An action</li> <li>A keybinding</li> <li>The arguments</li> </ul> <p></p>"},{"location":"Hotkeys/#categories","title":"Categories","text":"<p>Categories describe where in the app the hotkeys action takes place. For example:</p> <ul> <li>Sending a message by pressing enter takes place in the Split input box,</li> <li>Closing the current split takes place in the current Split.</li> </ul>"},{"location":"Hotkeys/#actions","title":"Actions","text":"<p>An action simply describes what a hotkey does. For example:</p> <ul> <li>The Reconnect to chat action in a Split causes Chatterino to reconnect to Twitch/IRC.</li> <li>The Zoom in/out action in a Window causes Chatterino to zoom in or out (depending on the arguments given)</li> </ul>"},{"location":"Hotkeys/#keybindings","title":"Keybindings","text":"<p>TODO: Short blurb how more advanced keybindings work</p>"},{"location":"Hotkeys/#arguments","title":"Arguments","text":"<p>Arguments describe the specifics of how the action will behave. For example:</p> <ul> <li>The Zoom in/out action in a Window takes a single argument (<code>in</code>, <code>out</code>, or <code>reset</code>) which tells Chatterino to either zoom in or zoom out.</li> </ul>"},{"location":"Image%20Uploader/","title":"Image Uploader","text":"<p>You can drag and drop images to Chatterino or paste them from clipboard to upload them to an external service.</p> <p>By default, the image uploader is turned off. You can enable by checking the <code>Chatterino Settings -&gt; External Tools -&gt; Image Uploader -&gt; Enable image uploader</code> option and configuring per one of the below options.</p> <p>Note to advanced users: This module sends multipart-form requests via POST method, so uploading via SFTP/FTP won't work. However, popular hosts like imgur.com and s-ul.eu are supported. Scroll down to see example configurations.</p>"},{"location":"Image%20Uploader/#configuration-explanation","title":"Configuration Explanation","text":"Row Description Request URL Link to an API endpoint, which is requested by Chatterino. Any needed URL parameters should be included here. Form field Name of a field, which contains image data. Extra headers Extra headers, that will be included in the request. Header name and value must be separated by colon (<code>:</code>). Multiple headers need to be separated with semicolons (<code>;</code>).Example: <code>Authorization: supaKey ; NextHeader: value</code>. Image link Schema that tells where is the link in service's response. Leave empty if server's response is just the link itself. Refer to json properties by <code>{property}</code>. Supports dot-notation, example: <code>{property.anotherProperty}</code>. Deletion link Same as above."},{"location":"Image%20Uploader/#examples","title":"Examples","text":""},{"location":"Image%20Uploader/#inuulscom","title":"i.nuuls.com","text":"Row Description Request URL <code>https://i.nuuls.com/upload</code> Form field <code>attachment</code> <p>Other fields empty.</p>"},{"location":"Image%20Uploader/#imgurcom","title":"imgur.com","text":"Row Description Request URL <code>https://api.imgur.com/3/image</code> Form field <code>image</code> Extra headers <code>Authorization: Client-ID c898c0bb848ca39</code> Image link <code>{data.link}</code> Deletion link <code>https://imgur.com/delete/{data.deletehash}</code> <p>You can also upload images to your imgur account by putting the following as <code>Extra headers</code>:</p> <p>Replace <code>XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code> with the token which you can obtain here.</p> <p><code>Authorization: Bearer XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></p>"},{"location":"Image%20Uploader/#s-uleu","title":"s-ul.eu","text":"<p>Replace <code>XXXXXXXXXXXXXXX</code> with your API key from s-ul.eu. It can be found on your account's configuration page.</p> Row Description Request URL <code>https://s-ul.eu/api/v1/upload?wizard=true&amp;key=XXXXXXXXXXXXXXX</code> Form field <code>file</code> Extra headers Image link <code>{url}</code> Deletion link <code>https://s-ul.eu/delete.php?file={filename}&amp;key=XXXXXXXXXXXXXXX</code>"},{"location":"Image%20Uploader/#ifourtfcom","title":"i.fourtf.com","text":"<p>This is not a hosted service, but rather a service that can be self-hosted. Click on the URL for more information. Replace <code>XXXXXXXXXXXXXXX</code> with your Base64-encoded user and password</p> Row Description Request URL <code>https://i.yourwebsite.com/upload</code> Form field <code>file</code> Extra headers <code>Authorization: Basic XXXXXXXXXXXXXXX</code> Image link Deletion link"},{"location":"Image%20Uploader/#unsupported-sites","title":"Unsupported sites","text":"<ul> <li><code>catbox.moe</code>: It's not possible yet to upload to catbox.moe due to how their upload method is constructed.</li> </ul>"},{"location":"Link%20Previews/","title":"Link Previews","text":"<p>Link Previews make it easy to check what's behind a link without visiting the link in the browser. All links go through github.com/chatterino/api to protect your IP from any leaks.</p>"},{"location":"Link%20Previews/#privacy-policy-terms-of-service","title":"Privacy Policy &amp; Terms of Service","text":"<p>Enabling this feature means your client will send additional data to our API to power this feature. You should read the Privacy Policy and Terms of Service before enabling this feature. If you have any questions about this, please contact us through the GitHub repo.</p>"},{"location":"Link%20Previews/#enabling","title":"Enabling","text":"<p>By default link previews are disabled. Turn them on under \"Link Previews\" in the settings. Optionally also turn on thumbnails in your preferred size for an even richer link experience.</p> <p></p>"},{"location":"Link%20Previews/#supported-links","title":"Supported Links","text":"<p>By default chatterino will use Open Graph tags to enrich tooltips. To enhance the tooltips even more, we have custom integrations for the following sites:</p> <ul> <li>BetterTTV</li> <li>Discord</li> <li>FrankerFaceZ</li> <li>Imgur</li> <li>Livestreamfails</li> <li>Supinic</li> <li>Twitch</li> <li>Twitter</li> <li>Wikipedia</li> <li>YouTube</li> </ul>"},{"location":"Link%20Previews/#demo","title":"Demo","text":""},{"location":"Moderation/","title":"Moderation","text":"<p>Chatterino contains a slew of features to assist moderators in moderating.</p>"},{"location":"Moderation/#chat-mode","title":"Chat Mode","text":"<p>You can easily change the chat modes in Chatterino using the button on the streamer bar.</p> <p></p> <p>You can choose from: Emote only, Subscriber only, Slow mode, R9K mode and Followers only mode.</p> <p></p>"},{"location":"Moderation/#logging","title":"Logging","text":"<p>Moderators are able to log all the channels they are in using the logging feature.</p> <p></p>"},{"location":"Moderation/#moderation-mode","title":"Moderation Mode","text":"<p>Moderation mode is enabled by clicking  in a channel that you moderate. Available variables are <code>{user.name}</code>, <code>{msg.id}</code>, <code>{msg.text}</code> &amp; <code>{channel.name}</code>. Below is a list of examples that can be used:</p> Function Action Ban a user <code>/ban {user.name}</code> Unban a user <code>/unban {user.name}</code> Timeout a user <code>/timeout {user.name} 600</code> Delete a user's message <code>/delete {msg.id}</code> pajbot2 report <code>/w botname #{channel.name} !report {user.name} being rude</code> pajbot2 longreport <code>/w botname #{channel.name} !longreport {user.name} being very rude</code> Open the user's usercard <code>/user {user.name}</code> pajbot banphrase <code>/w botname !add banphrase {msg.text}</code>"},{"location":"Moderation/#user-timeout-buttons","title":"User Timeout Buttons","text":"<p>User timeout buttons are very useful while looking at a user's logs. All 8 buttons can be configured to various timeout lengths:</p> <p></p> <p>User timeout buttons look like this:</p> <p></p>"},{"location":"Regex/","title":"Regex","text":"<p>Regular expressions (or short regexes) are often used to check if a text matches a certain pattern. For example the regex <code>ab?c</code> would match <code>abc</code> or <code>ac</code>, but not <code>abbc</code> or <code>123</code>. In Chatterino, you can use them to highlight messages (and more) based on complex conditions.</p> <p>You can try out your regex patterns on a website like regex101, using the <code>PCRE2</code> flavor.</p> <p>Basic patterns:</p> Pattern Matches <code>x?</code> nothing or <code>x</code> <code>x*</code> <code>x</code>, repeated any number of times <code>x+</code> <code>x</code>, repeated any number of times but at least 1 <code>^</code> The start of the text <code>$</code> The end of the text <code>x|y</code> <code>x</code> or <code>y</code> <p>You can group multiple statements with <code>()</code>:</p> Pattern Matches <code>asd?</code> <code>asd</code> or <code>as</code> <code>(asd)?</code> <code>asd</code> or nothing <code>\\(asd\\)</code> <code>(asd)</code>, literally <p>You can also group multiple characters with <code>[]</code>:</p> Pattern Matches <code>[xyz]</code> <code>x</code>, <code>y</code> or <code>z</code> <code>[1-5a-f]</code> <code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>,<code>5</code>,<code>a</code>,<code>b</code>,<code>c</code>,<code>d</code>,<code>e</code>,<code>f</code> <code>[^abc]</code> Anything, except <code>a</code>, <code>b</code> and <code>c</code> <code>[\\-]</code> <code>-</code>, literally (escaped with <code>\\</code>) <code>\\[xyz\\]</code> <code>[xyz]</code>, literally <p>Special patterns:</p> Pattern Matches <code>\\d</code> Digit characters (0-9) <code>\\D</code> Non-digit characters <code>\\w</code> Word characters (a-zA-Z0-9_) <code>\\W</code> Non-word characters <code>\\s</code> Spaces, tabs, etc. <code>\\S</code> Not spaces, tabs, etc. <code>\\b</code> Word boundaries (between \\w and \\W) <code>\\B</code> Non-word boundaries"},{"location":"Search/","title":"Search","text":"<p>Chatterino has a Search Popup which lets you quickly find messages in the chat. You can open it with the <code>Ctrl+F</code> shortcut.</p>"},{"location":"Search/#search-filters","title":"Search filters","text":"<p>You can use several search filters (format <code>filter:value</code>) to narrow down your search. <code>value</code> can have multiple comma-separated entries (look at examples below). Surround <code>value</code> in quotation marks to use whitespaces within it, useful for dealing with the regex filter. Starting in 2.4.1 the ability to negate searches is possible. (format <code>!filter:value</code>)</p> <ul> <li><code>from:&lt;username&gt;</code> - shows messages from certain users</li> <li><code>has:&lt;flags&gt;</code> - shows messages containing specified elements. List of flags:<ul> <li><code>link</code> - filters messages with links</li> </ul> </li> <li><code>in:&lt;channel&gt;</code> - shows messages that originate from certain channels, useful in <code>#/mentions</code> channel</li> <li><code>is:&lt;flags&gt;</code> - shows certain types of messages. List of flags:<ul> <li><code>deleted</code> or <code>disabled</code> - shows deleted messages</li> <li><code>sub</code> or <code>subscription</code> - shows subscription messages</li> <li><code>timeout</code> or <code>ban</code> - shows moderation messages</li> <li><code>highlighted</code> - shows highlighted messages</li> <li><code>system</code> - shows system messages (grey text ones like: \"Now hosting username\", \"streamer is live\", etc.)</li> <li><code>first-msg</code> - shows a user's first message in the channel</li> <li><code>hype-chat</code> - shows a user's hype chat in the channel (Paid Twitch Feature)<sup>1</sup></li> <li><code>cheer-msg</code> - shows messages containing bits</li> <li><code>redemption</code> - shows messages that cost the user Twitch channel points</li> <li><code>reply</code> - shows messages sent using the Twitch reply feature</li> </ul> </li> <li><code>regex:&lt;regex&gt;</code> - shows messages matching a given regex</li> <li><code>badge:&lt;value&gt;</code> - shows messages from users that have a given badge</li> <li><code>subtier:&lt;value&gt;</code> - shows messages from users that are subscribed at a given tier</li> </ul>"},{"location":"Search/#examples","title":"Examples","text":""},{"location":"Search/#shows-messages-from-user-fourtf-containing-word-merge","title":"Shows messages from user <code>fourtf</code> containing word <code>merge</code>","text":"<p><code>from:fourtf merge</code> </p>"},{"location":"Search/#shows-messages-from-users-pajbot-and-zneix-that-have-links-containing-word-chatterino","title":"Shows messages from users <code>pajbot</code> and <code>zneix</code> that have links containing word <code>chatterino</code>","text":"<p><code>has:link from:pajbot,zneix chatterino</code> </p>"},{"location":"Search/#shows-messages-only-from-channels-pajlada-and-supinic-from-user-supibot","title":"Shows messages only from channels <code>pajlada</code> and <code>supinic</code> from user <code>supibot</code>","text":"<p><code>in:pajlada,supinic from:supibot</code> </p>"},{"location":"Search/#shows-subscription-messages","title":"Shows subscription messages","text":"<p><code>is:sub</code> </p>"},{"location":"Search/#shows-deleted-messages-containing-word-vanish","title":"Shows deleted messages containing word <code>vanish</code>","text":"<p><code>is:deleted vanish</code> </p>"},{"location":"Search/#shows-timeoutban-messages","title":"Shows timeout/ban messages","text":"<p><code>is:timeout</code> </p>"},{"location":"Search/#shows-highlighted-messages","title":"Shows highlighted messages","text":"<p><code>is:highlighted</code> </p>"},{"location":"Search/#shows-messages-matching-a-given-regex","title":"Shows messages matching a given regex","text":"<p><code>regex:^gachi\\w*$</code> </p>"},{"location":"Search/#shows-messages-from-users-who-have-the-listening-only-badge","title":"Shows messages from users who have the \"Listening only\" badge","text":"<p><code>badge:no_video</code> </p>"},{"location":"Search/#shows-messages-from-users-who-are-tier-3-subscribed","title":"Shows messages from users who are tier-3 subscribed","text":"<p><code>subtier:3</code> </p>"},{"location":"Search/#shows-messages-from-users-who-are-not-gazatu","title":"Shows messages from users who are NOT gazatu","text":"<p><code>!from:gazatu</code> </p>"},{"location":"Search/#shows-messages-that-do-not-contain-links","title":"Shows messages that do NOT contain links","text":"<p><code>!has:link</code> </p> <ol> <li> <p>Replaced <code>is:elevated-msg</code> in 2.4.5\u00a0\u21a9</p> </li> </ol>"},{"location":"Settings/","title":"Settings","text":""},{"location":"Settings/#where-is-my-chatterino-folder-located","title":"Where is my Chatterino folder located?","text":"<p>On Windows: <code>%APPDATA%/Chatterino2</code></p> <p>On Linux: <code>$HOME/.local/share/chatterino</code></p> <p>On Mac: <code>$HOME/Library/Application Support/chatterino</code></p>"},{"location":"Settings/#files","title":"Files","text":"<p>Commands and Settings have a small backup mechanism that saves the older version in a file like commands.json.bkp-2 in case you want to return to older versions of the file.</p> <ul> <li>commands.json - Will contain all your Chatterino commands</li> <li>settings.json - This contains most of your settings, including sensitive data like your login token</li> <li>window-layout.json - This contains information which tabs and splits you have open and how they are positioned</li> <li>irc.json - When you have a non-twitch IRC connection, this contains the configured servers and settings</li> </ul>"},{"location":"Settings/#help","title":"Help","text":""},{"location":"Settings/#how-do-i-delete-the-chatterino-cache-settings","title":"How do I delete the Chatterino cache / settings?","text":"<p>Navigate to your Chatterino folder and remove corresponding folders.</p> <ul> <li>The Cache folder contains cached network requests from Chatterino.</li> <li>The Logs folder contains chat logs from chats you've had open in Chatterino.</li> <li>The Misc folder contains internal information about the current running instance of Chatterino.</li> <li>The Settings folder contains any settings you may have configured in Chatterino (e.g. font size, highlight phrases) and your list of channels open.</li> </ul>"},{"location":"Settings/#my-settings-commands-window-layout-are-not-saving","title":"My settings / commands / window layout are not saving","text":"<p>This is usually a case because Chatterino is unable to save settings on your disk. To fix that, try following steps:</p> <ol> <li>Run Chatterino as Administrator.</li> <li>Back up your settings by copying them from your Chatterino folder to a safe location on your disk and delete them. Restart your computer and try launching Chatterino again.</li> <li>Back up your settings, uninstall Chatterino and install it again, but make sure <code>Fresh Install</code> option is checked.</li> <li>Try running Chatterino in portable mode.</li> </ol>"},{"location":"Themes/","title":"Themes","text":"<p>Beta Warning</p> <p>Custom themes are not yet stable. There may be breaking changes in the future (see Migrations).</p> <p>Chatterino supports custom-made themes since nightly <code>5d0bdc1</code>.</p> <p>Custom themes are JSON files that are stored in the <code>Themes</code> folder inside your Chatterino folder.</p>"},{"location":"Themes/#creating-a-theme","title":"Creating A Theme","text":"<p>To create a theme, it's best to use one of the built-in themes as the starting point. You can find them in the <code>resources/themes</code> folder inside the source-code. Copy one into the <code>Themes</code> folder and restart Chatterino. When you open the settings and select a theme, you should see one prefixed with <code>Custom:</code>. Make sure, you're familiar with the common words used in Chatterino.</p>"},{"location":"Themes/#schema","title":"Schema","text":"<p>Chatterino themes have a JSON schema that must match in order for the theme to be displayed correctly. Many editors support JSON schemas out of the box and warn you about invalid values and provide completions.</p> <p>If you used one of the base themes, then the <code>$schema</code> key inside the JSON is invalid, since its value is configured to work inside the Chatterino source-code. You should change the value of <code>$schema</code> to <code>https://github.com/Chatterino/chatterino2/raw/master/docs/ChatterinoTheme.schema.json</code> as shown below. If you want to pin the schema to a specific version, replace <code>master</code> with your desired version (for example <code>v2.4.4</code>).</p> <pre><code>{\n    \"$schema\": \"https://github.com/Chatterino/chatterino2/raw/master/docs/ChatterinoTheme.schema.json\",\n    // ...\n}\n</code></pre>"},{"location":"Themes/#auto-reloading","title":"Auto Reloading","text":"<p>When developing themes, you often want to reload your changes and see how they look. To aid you in doing that, Chatterino can automatically reload your theme. Use the <code>/c2-theme-autoreload</code> command in any chat to toggle auto-reload.</p> <p>Warning</p> <p>Make sure to disable auto-reloading after you're done with your changes to reduce resource usage.</p>"},{"location":"Themes/#colors","title":"Colors","text":"<p>Colors in themes can be specified in various ways. All values that expect a <code>qt-color</code> accept one of the following values. Make sure you're using the schema to get editor feedback. Technically, the values are passed to <code>QColor</code> which does the parsing.</p>"},{"location":"Themes/#hex-colors","title":"Hex Colors","text":"<p><code>A</code>, <code>R</code>, <code>G</code>, and <code>B</code> are single hex digits (0-9, a-f, A-F).</p> <ul> <li><code>#RGB</code></li> <li><code>#RRGGBB</code></li> <li> <p><code>#AARRGGBB</code> This format is different from the CSS Color Moudle Level 4 <code>&lt;hex-color&gt;</code>, where the alpha value is at the end.</p> </li> <li> <p><code>#RRRGGGBBB</code></p> </li> <li><code>#RRRRGGGGBBBB</code></li> </ul>"},{"location":"Themes/#named-colors","title":"Named Colors","text":"<ul> <li>SVG color keyword names - For example <code>red</code>, <code>mediumspringgreen</code>. Note that these color names are technically case-insensitive and accept spaces, but this isn't supported by the schema, which only accepts lower-case names.</li> <li><code>transparent</code></li> </ul>"},{"location":"Themes/#alternate-editors","title":"Alternate editors","text":"<p>These are some alternate ways of creating your own custom themes:</p> <ul> <li>Chatterino Theme Creator by <code>doge41732</code></li> </ul>"},{"location":"Themes/#migrations","title":"Migrations","text":"<p>This section contains added, updated, and removed properties in a release, and commit for nightly versions.</p>"},{"location":"Third_party_services/","title":"Third party services","text":"<p>Chatterino integrates with a bunch of third party services to provide extended functionality for you.</p>"},{"location":"Third_party_services/#betterttv","title":"BetterTTV","text":"<p>For Twitch channels, we load emotes from BetterTTV.</p> <p>BetterTTV provides global emotes that are available in every channel. These can be disabled with the \"Show BTTV global emotes\" setting.</p> <p>BetterTTV provides channel-specific emotes. What emotes are loaded is up to the owner of the channel you're in. These can be disabled with the \"Show BTTV channel emotes\" setting.</p>"},{"location":"Third_party_services/#frankerfacez","title":"FrankerFaceZ","text":"<p>For Twitch channels, we load emotes and badges from FrankerFaceZ.</p> <p>FrankerFaceZ provides global emotes that are available in every channel. These can be disabled with the \"Show FFZ global emotes\" setting.</p> <p>FrankerFaceZ provides channel-specific emotes. What emotes are loaded is up to the owner of the channel you're in. These can be disabled with the \"Show FFZ channel emotes\" setting.</p> <p>Badges are for developers &amp; supporters of FrankerFaceZ and will be displayed next to their username. These can be disabled with the \"FrankerFaceZ\" setting under Advanced -&gt; Visible badges.</p> <p>FrankerFaceZ allows supporters to upload custom moderator and VIP badges for their channel, these can be disabled with the \"Use custom FrankerFaceZ moderator badges\" and \"Use custom FrankerFaceZ VIP badges\" settings.</p>"},{"location":"Third_party_services/#7tv","title":"7TV","text":"<p>For Twitch channels, we load emotes and badges from 7TV.</p> <p>7TV provides global emotes that are available in every channel. These can be disabled with the \"Show 7TV global emotes\" setting.</p> <p>7TV provides channel-specific emotes. What emotes are loaded is up to the owner of the channel you're in. These can be disabled with the \"Show 7TV channel emotes\" setting.</p> <p>7TV provides a streaming Event API that posts live updates when emotes change in channels. These can be disabled with the \"Enable 7TV live emote updates\" setting.</p> <p>7TV provides the ability to use unlisted emotes. By default, Chatterino will not display these emotes even if they're added to a Channel. You can modify this behaviour with the \"Show unlisted 7TV emotes\" setting.</p> <p>Badges are for developers &amp; supporters of 7TV and will be displayed next to their username. These can be disabled with the \"7TV\" setting under Advanced -&gt; Visible badges.</p>"},{"location":"Third_party_services/#chatterino-api","title":"Chatterino API","text":""}]}